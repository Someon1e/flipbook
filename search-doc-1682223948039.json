[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/flipbook/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/flipbook/docs/intro#installation","content":"To install flipbook, visit the Roblox marketplace and click &quot;Install&quot; to get the latest version. "},{"title":"Writing Stories​","type":1,"pageTitle":"Getting Started","url":"/flipbook/docs/intro#writing-stories","content":"Learn how to create a storybook and stories on the Writing Stories page. "},{"title":"Contributing","type":0,"sectionRef":"#","url":"/flipbook/docs/contributing","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Contributing","url":"/flipbook/docs/contributing#getting-started","content":"You should be using Visual Studio Code as your text editor, and have the following extensions installed: RojoSeleneStyLuaLuau LSP Once the Rojo extension is installed a welcome screen will be displayed. Scroll down to the section for the Roblox Studio plugin and select &quot;Manage it for me.&quot; Next time you open a place in Studio you will have the Rojo plugin ready to go. Next install our toolchain manager, Foreman. Foreman handles the installation of several of our other tools, like Rojo, Wally, Selene, and StyLua. To make the tools that Foreman installs avialable on your system you will need to manually add it to your PATH. Windows Add C:\\Users\\You\\.foreman\\bin to your PATHFollow this guide for how to do that MacOS Open TerminalOpen the corresponding file for your terminal Bash: nano ~/.bash_profileZSH: nano ~/.zshenv Append export PATH=&quot;$PATH:~/.foreman/bin to the end of the file "},{"title":"Development​","type":1,"pageTitle":"Contributing","url":"/flipbook/docs/contributing#development","content":"With the above requirements satisfied, run the following commands from your clone of this repository to start developing: # Install Rojo, Wally, Selene, StyLua, and others foreman install # Install dependencies wally install  Next use Rojo to build the plugin: # Windows rojo build dev.project.json -o $LOCALAPPDATA/Roblox/Plugins/flipbook.rbxm # MacOS rojo build dev.project.json -o ~/Documents/Roblox/Plugins/flipbook.rbxm  You can also run rojo build with the --watch flag while developing so that the plugin gets rebuilt when changes are made. Once rebuilt, simply reload to a new Baseplate for the changes to take effect. tip When using VSCode, you can press Ctrl+Shift+B on Windows or Cmd+Shift+B on MacOS to execute the included build task which will build the flipbook plugin for your OS. Once built, open up a Baseplate to start interacting with the plugin. "},{"title":"Using flipbook to develop flipbook​","type":1,"pageTitle":"Contributing","url":"/flipbook/docs/contributing#using-flipbook-to-develop-flipbook","content":"flipbook is made up of Roact components, each of which has a story file. This means you can use flipbook itself for developing it. Once you have flipbook built, navigate to the Studio settings and turn on &quot;Plugin Debugging Enabled.&quot;  Then load a new Baseplate and open the flipbook plugin. Its storybook should now appear in the sidebar. "},{"title":"Testing​","type":1,"pageTitle":"Contributing","url":"/flipbook/docs/contributing#testing","content":"While developing, you should also be writing unit tests. Unit tests are written in .spec.lua files. You can see examples of this throughout the repository's codebase. To run tests, simply start the experience in Studio. You will see in the output if tests are passing or failing. If your code is not properly tested, maintainers will let you know and offer suggestions on how to improve your tests so you can get your pull request merged. "},{"title":"Migrating from Hoarcekat","type":0,"sectionRef":"#","url":"/flipbook/docs/migrating","content":"","keywords":""},{"title":"Creating the Storybook​","type":1,"pageTitle":"Migrating from Hoarcekat","url":"/flipbook/docs/migrating#creating-the-storybook","content":"The main difference in how flipbook and Hoarcekat handle stories is that flipbook requires a &quot;storybook&quot; file to know where your stories are. As such, to migrate over from Hoarcekat the first thing you should do is create a storybook for your project. To do this, create a new ProjectName.storybook.lua file at the root of your project with the following contents: -- Make sure to adjust the path to Roact if needed local Roact = require(script.Parent.Parent.Roact) return { roact = Roact, storyRoots = { script.Parent.Components } }  From there the storybook will appear in flipbook's sidebar and you should be able to select your stories with no problem. "},{"title":"Migrating Stories​","type":1,"pageTitle":"Migrating from Hoarcekat","url":"/flipbook/docs/migrating#migrating-stories","content":"To fully benefit from the features flipbook has to offer, this section will guide you in converting an existing Hoarcekat story to flipbook's format. We will use the following component and story as an example: -- HelloWorld.lua type Props = { name: string? } local function HelloWorld(props: Props) local name = props.name or &quot;World&quot; return Roact.createElement(&quot;TextLabel&quot;, { Text = (&quot;Hello %s!&quot;):format(name), TextColor3 = Color3.fromRGB(0, 0, 0), TextScaled = true, Font = Enum.Font.GothamBold, Size = UDim2.fromOffset(200, 100), BackgroundColor3 = Color3.fromRGB(255, 255, 255), }) end return HelloWorld  -- HelloWorld.story.lua local Roact = require(script.Parent.Parent.Roact) local HelloWorld = require(script.Parent.HelloWorld) return function(target) local root = Roact.createElement(HelloWorld, { name = &quot;flipbook&quot; }) local handle = Roact.mount(root, target) return function() Roact.unmount(handle) end end  Converting a Hoarcekat story like this into one compatible with flipbook is quite easy. In fact, all that's needed from the above story is the call to Roact.createElement: -- HelloWorld.story.lua local Roact = require(script.Parent.Parent.Roact) local HelloWorld = require(script.Parent.HelloWorld) return { story = Roact.createElement(HelloWorld, { name = &quot;flipbook&quot; }) }  Since flipbook assumes use of Roact, you don't have to handle mounting and unmounting yourself. And now that the story has been migrated we can start supercharging it. For starters, we can give the story a summary that will be displayed when viewing it: local Roact = require(script.Parent.Parent.Roact) local HelloWorld = require(script.Parent.HelloWorld) return { + summary = &quot;This is a Hoarcekat component that has been converted for flipbook!&quot; story = Roact.createElement(HelloWorld, { name = &quot;flipbook&quot; }) }  Next lets add some controls so we can change the name prop without having to manually modify the story: local Roact = require(script.Parent.Parent.Roact) local HelloWorld = require(script.Parent.HelloWorld) return { summary = &quot;This is a Hoarcekat component that has been converted for flipbook!&quot; + controls = { + name = &quot;flipbook&quot; + } + story = return function(props) + return Roact.createElement(HelloWorld, { + name = props.controls.name + }) + end }  You will now have a &quot;Controls&quot; section with an input field. Try changing the value to see your component update live. You are now equipped to migrate your other Hoarcekat stories over to flipbook! "},{"title":"Further Reading​","type":1,"pageTitle":"Migrating from Hoarcekat","url":"/flipbook/docs/migrating#further-reading","content":"Writing StoriesStory Format "},{"title":"Writing Stories","type":0,"sectionRef":"#","url":"/flipbook/docs/writing-stories","content":"","keywords":""},{"title":"Storybook​","type":1,"pageTitle":"Writing Stories","url":"/flipbook/docs/writing-stories#storybook","content":"Every project needs a storybook, so to get started you will create a new ProjectName.storybook.lua file at the root of your project with the following contents: -- src/ProjectName.storybook.lua -- Make sure to adjust the path to Roact if needed local Roact = require(path.to.Roact) return { roact = Roact, storyRoots = { script.Parent.Components } }  When flipbook reads this file, it will use the copy of Roact given for each of your stories, and it will search in script.Parent.Components for all of your story files. Right now you should see a single entry in flipbook's sidebar for this storybook. Let's add a story to liven things up! "},{"title":"Story​","type":1,"pageTitle":"Writing Stories","url":"/flipbook/docs/writing-stories#story","content":"A story and its associated component should be in two separate files. Both files should share the same name, however the story will end with .story. To get started, let's create Button.lua and Button.story.lua: -- src/Components/Button.lua local Roact = require(path.to.Roact) type Props = { text: string, onActivated: (() -&gt; ())?, } local function Button(props) return Roact.createElement(&quot;TextButton&quot;, { Text = props.text, TextSize = 16, Font = Enum.Font.GothamBold, TextColor3 = Color3.fromRGB(255, 255, 255), BackgroundColor3 = Color3.fromRGB(239, 31, 90), BorderSizePixel = 0, AutomaticSize = Enum.AutomaticSize.XY, [Roact.Event.Activated] = props.onActivated, }, { Padding = Roact.createElement(&quot;UIPadding&quot;, { PaddingTop = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8), PaddingLeft = UDim.new(0, 8), }), }) end return Button  And now let's write the story to mount the Button component: -- src/Components/Button.story.lua local Roact = require(path.to.Roact) local Button = require(script.Parent.Button) return { summary = &quot;A generic button component that can be used anywhere&quot;, story = Roact.createElement(Button, { text = &quot;Click me&quot;, onActivated = function() print(&quot;click&quot;) end, }), }  In the sidebar for flipbook you should now see your newly created Button story. Go ahead and select it to view the button you just created. Writing stories can significantly improve your experience while developing Roact components.It's recommended that you create a story for each component so that you work on them in isolation to build up a strong foundation for your app. "},{"title":"Controls​","type":1,"pageTitle":"Writing Stories","url":"/flipbook/docs/writing-stories#controls","content":"flipbook also has the feature of &quot;controls&quot; where you can specify configurable values that get passed down into your component. We will continue with our Button component and give it a &quot;disabled&quot; state for when we don't want a user to be able to interact with it: type Props = { text: string, + isDisabled: boolean?, onActivated: (() -&gt; ())?, } local function Button(props) + local color = if props.isDisabled then Color3.fromRGB(82, 82, 82) else Color3.fromRGB(239, 31, 90) return Roact.createElement(&quot;TextButton&quot;, { Text = props.text, TextSize = 16, Font = Enum.Font.GothamBold, TextColor3 = Color3.fromRGB(255, 255, 255), - BackgroundColor3 = Color3.fromRGB(239, 31, 90), + BackgroundColor3 = color, BorderSizePixel = 0, AutomaticSize = Enum.AutomaticSize.XY, - [Roact.Event.Activated] = props.onActivated, + [Roact.Event.Activated] = if props.isDisabled then nil else props.onActivated, }, { Padding = Roact.createElement(&quot;UIPadding&quot;, { PaddingTop = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8), PaddingLeft = UDim.new(0, 8), }), }) end return Button  And now modify the story to pass in the isDisabled prop: local Roact = require(path.to.Roact) local Button = require(script.Parent.Button) return { summary = &quot;A generic button component that can be used anywhere&quot;, story = Roact.createElement(Button, { text = &quot;Click me&quot;, + isDisabled = true, onActivated = function() print(&quot;click&quot;) end, }), }  The story should automatically reload and you will see the button is greyed out and no longed prints &quot;click&quot; when activated. Despite this new isDisabled prop, it is still hard to test out different state sfor the button since you have to manually edit the story each time. That's where controls come in. Modify your story as follows: local Roact = require(path.to.Roact) local Button = require(script.Parent.Button) return { summary = &quot;A generic button component that can be used anywhere&quot;, + controls = { + isDisabled = false, + }, - story = Roact.createElement(Button, { + story = function(props) + return Roact.createElement(Button, { text = &quot;Click me&quot;, - isDisabled = true, + isDisabled = props.controls.isDisabled, onActivated = function() print(&quot;click&quot;) end, }) + end, }  With this change, a new &quot;Controls&quot; panel will appear where you can toggle the isDisabled prop. This gets fed into your Button component and will automatically reload. You can now toggle between your button's states to see how it behaves. "},{"title":"Next Steps​","type":1,"pageTitle":"Writing Stories","url":"/flipbook/docs/writing-stories#next-steps","content":"You have just been given an example of how to create a storybook and a story for a Button component that makes use of flipbook's controls feature. This document outlines the biggest features of flipbook, but there are other options you can play around with. Check out Story Format next to learn about all the options you have available. "},{"title":"Story Format","type":0,"sectionRef":"#","url":"/flipbook/docs/story-format","content":"","keywords":""},{"title":"Storybook​","type":1,"pageTitle":"Story Format","url":"/flipbook/docs/story-format#storybook","content":"Storybooks are your entypoint to flipbook and you'll need at least one to start using it. The only required prop is the storyRoots array, which tells flipbook which Instances to search the descendants of for .story files Name\tType\tNotesstoryRoots\t{ Instance }\tAn array of instances to search the descendants of for .story files. name\tstring?\tThe name to use for the storybook. This defaults to script.Name with .storybook stripped off. roact\tRoact?\tThe version of Roact to use across all stories. react\tReact?\tThe version of React to use across all stories. reactRoblox\tReactRoblox?\tThe version of ReactRoblox to use when mounting React components. Example: -- example/Example.storybook.lua return { name = &quot;Example Storybook&quot;, storyRoots = { script.Parent, }, }  "},{"title":"Roact Story​","type":1,"pageTitle":"Story Format","url":"/flipbook/docs/story-format#roact-story","content":"Support for Roblox's Roact library is built in to flipbook, allowing you to supply your copy of Roact and return Roact elements to create stories. Name\tType\tDescriptionstory\tRoactElement \\| (props: StoryPropss) -&gt; RoactElement\tYour story can either be a Roact element or a function that accepts props and returns a Roact element. The latter format is needed to support the use of controls. See below for an example roact\tRoact\tThis must be set to your copy of Roact. Since Roact uses special symbols for things like children, flipbook needs to mount the story with the same copy of Roact that you used to create your elements. name\tstring?\tOptional name for the story. Defaults to the file name. summary\tstring?\tOptional description of the story that will appear as part of the information at the top of the preview. controls\tStoryControls?\tOptional controls to see how your story behaves with various props. Example: -- example/Button.story.lua local Example = script:FindFirstAncestor(&quot;Example&quot;) local Roact = require(Example.Parent.Packages.Roact) local Button = require(script.Parent.Button) return { summary = &quot;A generic button component that can be used anywhere&quot;, roact = Roact, story = Roact.createElement(Button, { text = &quot;Click me&quot;, onActivated = function() print(&quot;click&quot;) end, }), }  Example with controls: -- example/ButtonWithControls.story.lua local Example = script:FindFirstAncestor(&quot;Example&quot;) local Roact = require(Example.Parent.Packages.Roact) local ButtonWithControls = require(script.Parent.ButtonWithControls) local controls = { isDisabled = false, } type Props = { controls: typeof(controls), } return { summary = &quot;A generic button component that can be used anywhere&quot;, controls = controls, roact = Roact, story = function(props: Props) return Roact.createElement(ButtonWithControls, { text = &quot;Click me&quot;, isDisabled = props.controls.isDisabled, onActivated = function() print(&quot;click&quot;) end, }) end, }  "},{"title":"React Story​","type":1,"pageTitle":"Story Format","url":"/flipbook/docs/story-format#react-story","content":"Roblox's unreleased React 17 port is natively supported by flipbook, allowing you to use the React and ReactRoblox packages for mounting your components. You can find React and ReactRoblox as part of the CorePackages repo on GitHub. Name\tType\tDescriptionstory\tReactElement \\| (props: StoryPropss) -&gt; ReactElement\tYour story can either be a React element or a function that accepts props and returns a React element. The latter format is needed to support the use of controls. See below for an example react\tReact\tThis must be set to your copy of React. Since React uses special symbols for things like children, flipbook needs to mount the story with the same copy of React that you used to create your elements. reactRoblox\tReactRoblox\tThis must be set to your copy of ReactRoblox that is compatible with the supplied copy of React. This is used by flipbook to mount your React components. name\tstring?\tOptional name for the story. Defaults to the file name. summary\tstring?\tOptional description of the story that will appear as part of the information at the top of the preview. controls\tStoryControls?\tOptional controls to see how your story behaves with various props. Example: -- example/ReactCounter.story.lua local Example = script:FindFirstAncestor(&quot;Example&quot;) local React = require(Example.Parent.Packages.React) local ReactRoblox = require(Example.Parent.Packages.ReactRoblox) local ReactCounter = require(script.Parent.ReactCounter) local controls = { increment = 1, waitTime = 1, } type Props = { controls: typeof(controls), } return { summary = &quot;A simple counter that increments every second. This is a copy of the Counter component, but written with React&quot;, controls = controls, react = React, reactRoblox = ReactRoblox, story = function(props: Props) return React.createElement(ReactCounter, { increment = props.controls.increment, waitTime = props.controls.waitTime, }) end, }  "},{"title":"Functional Story​","type":1,"pageTitle":"Story Format","url":"/flipbook/docs/story-format#functional-story","content":"A Functional story uses a function to create and mount UI. This is the most flexible story format and is useful when using a UI library that is not yet natively supported by flipbook. You simply parent your UI elements to the target argument and optionally return a function that gets called to cleanup the story. Name\tType\tDescriptionstory\t(parent: GuiObject, props: StoryProps) -&gt; (() -&gt; ()))?\tLike you might expect, a Functional story uses a function to create and mount the story. This is the most flexible story format and is useful when using a UI library that is not yet natively supported. You simply parent your UI elements name\tstring?\tOptional name for the story. Defaults to the file name. summary\tstring?\tOptional description of the story that will appear as part of the information at the top of the preview. controls\tStoryControls?\tOptional controls to see how your story behaves with various props. Example: -- example/Functional.story.lua local controls = { text = &quot;Functional Story&quot;, } type Props = { controls: typeof(controls), } return { summary = &quot;This story uses a function with a cleanup callback to create and mount the gui elements. This works similarly to Hoarcekat stories but also supports controls and other metadata. Check out the source to learn more&quot;, controls = controls, story = function(parent: GuiObject, props: Props) local label = Instance.new(&quot;TextLabel&quot;) label.Text = props.controls.text label.Font = Enum.Font.Gotham label.TextColor3 = Color3.fromRGB(0, 0, 0) label.BackgroundColor3 = Color3.fromRGB(255, 255, 255) label.TextSize = 16 label.AutomaticSize = Enum.AutomaticSize.XY local padding = Instance.new(&quot;UIPadding&quot;) padding.PaddingTop = UDim.new(0, 8) padding.PaddingRight = padding.PaddingTop padding.PaddingBottom = padding.PaddingTop padding.PaddingLeft = padding.PaddingTop padding.Parent = label label.Parent = parent return function() label:Destroy() end end, }  "},{"title":"Hoarcekat Story​","type":1,"pageTitle":"Story Format","url":"/flipbook/docs/story-format#hoarcekat-story","content":"Hoarcekat stories are supported to make migration to flipbook easier. See the migration guide for more info. Example: -- example/Hoarcekat.story.lua local Example = script:FindFirstAncestor(&quot;Example&quot;) local Roact = require(Example.Parent.Packages.Roact) return function(target: Instance) local root = Roact.createElement(&quot;TextLabel&quot;, { Text = &quot;Hoarcekat Story&quot;, TextScaled = true, TextColor3 = Color3.fromRGB(255, 255, 255), BackgroundColor3 = Color3.fromRGB(0, 0, 0), Size = UDim2.fromOffset(300, 100), }, { Padding = Roact.createElement(&quot;UIPadding&quot;, { PaddingTop = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8), PaddingLeft = UDim.new(0, 8), }), }) local tree = Roact.mount(root, target) return function() Roact.unmount(tree) end end  "}]